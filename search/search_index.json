{"config":{"lang":["en"],"separator":"[\\s\\-\\.]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Documentation","text":"<p>Welcome to the documentation of the OSTIS Metasystem! This guide provides an overview of the OSTIS Metasystem within the framework of the OSTIS Technology, its components, and its applications for developing next-generation intelligent computer systems.</p>"},{"location":"#what-is-the-ostis-metasystem","title":"What is the OSTIS Metasystem?","text":"<p>The OSTIS Metasystem is an intelligent computer system designed to provide comprehensive support for all stages of the life cycle of intelligent systems, known as ostis-systems, which are developed using the OSTIS Technology. It serves as both a project management system and a knowledge portal for designing, producing, operating, and evolving semantically compatible hybrid intelligent systems.</p> <p>Table of contents:</p> <ul> <li>Quick Start - get up and running with ostis-metasystem quickly</li> <li>Build Instructions - guidelines for building the project, configuring settings<ul> <li>Quick Start for Contributors - get up and start developing ostis-metasystem quickly</li> <li>Build System - how to build the project and use it as a library</li> <li>CMake Flags - description of CMake flags used to configure ostis-metasystem</li> </ul> </li> <li>Development - guidelines for contributing to development<ul> <li>Contributing Guide - guide for those who wants to make contribution into ostis-metasystem</li> <li>Codestyle Guide - guide for those who wants to write code for ostis-metasystem</li> </ul> </li> <li>License</li> <li>Changelog</li> </ul>"},{"location":"CONTRIBUTING/","title":"CONTRIBUTING","text":"<p>This page describes rules to contribute changes and features by Pull Requests creating.</p>"},{"location":"CONTRIBUTING/#initialize","title":"Initialize","text":"<p>To initialize your repo do:</p> <ul> <li>Fork <code>https://github.com/ostis-ai/ostis-metasystem</code>.</li> <li>Clone your fork to your machine and prepare (see Readme).</li> </ul> <pre><code>git clone git@github.com:yourlogin/ostis-metasystem.git\ncd ostis-metasystem\ngit remote add upstream git@github.com:ostis-ai/ostis-metasystem.git\n</code></pre> <ul> <li>To update your <code>main</code> from <code>upstream</code> use:</li> </ul> <pre><code>git fetch upstream\ngit checkout upstream/main\n</code></pre> <ul> <li>Use <code>git rebase</code> instead of <code>merge</code>. See documentation about this command. To rebase your branch against main use:</li> </ul> <pre><code>git checkout &lt;yourbranch&gt;\ngit rebase upstream/main\n</code></pre> <ul> <li>If you have any problems, then redo:</li> </ul> <pre><code>git rebase --abort\n</code></pre> <ul> <li>Or ask in Element.</li> </ul>"},{"location":"CONTRIBUTING/#commits-message-format","title":"Commits message format","text":"<p>Each commit message should be formed as: <code>[tag1]...[tagN] Message text (#issue)</code>.</p> <p>Message text should start from an upper case letter. If commit doesn't fix or implement any #issue, then it shouldn't be pointed in commit message.</p> <p>Examples:</p> <pre>\n[solver] Implement TranslateMainSystemIdtfsFromScToFileAgent\n[docs] Add docs for TranslateMainSystemIdtfsFromScToFileAgent\n</pre> <p>Possible tags:</p> <ul> <li><code>[kb]</code> - changes in <code>sc-models/knowledge-base</code> folder;</li> <li><code>[solver]</code> - changes in <code>platform-dependent-components/problem-solver</code> and <code>sc-models/problem-solver</code> folder;</li> <li><code>[interface]</code> - changes in <code>platform-dependent-components/interface</code> and <code>sc-models/interface</code> folder;</li> <li><code>[tests]</code> or <code>[test]</code> - changes in tests;</li> <li><code>[config]</code> - commits with changes in configuration;</li> <li><code>[review]</code> - commits with review fixes;</li> <li><code>[refactor]</code> - commits with some code refactoring;</li> <li><code>[changelog]</code> - use when you update changelog;</li> <li><code>[docs]</code> or <code>[doc]</code> - use when you update documentation;</li> <li><code>[build]</code> - updates in build system;</li> <li><code>[cmake]</code> - updates in cmake files;</li> <li><code>[scripts]</code> - updates in the <code>ostis-metasystem/scripts</code> files;</li> <li><code>[ci]</code> - changes in <code>ci</code> configuration or scripts;</li> <li><code>[git]</code> - changes in <code>git</code> configuration.</li> </ul> <p>Each commit in Pull Request should be an atomic. In other words, it should implement or fix one feature. For example:</p> <pre>\nLast commit\n...\n[tests] Test TranslateMainSystemIdtfsFromScToFileAgent\n[changelog] Add info about TranslateMainSystemIdtfsFromScToFileAgent\n...\nInit commit\n</pre> <p>Each commit should have not much differences excluding cases, with:</p> <ul> <li>CodeStyle changes; </li> <li>Renames; </li> <li>Code formatting.</li> </ul> <p>Do atomic commits for each changes. For example if you rename some members in <code>ClassX</code> and <code>ClassY</code>, then do two commits:</p> <pre>\n[refactor] Rename members in ClassX according to codestyle\n[refactor] Rename members in ClassY according to codestyle\n</pre> <p>Do not mix codestyle changes and any logical fixes in one commit.</p> <p>All commits that not follow these rules should be split according to these rules. Otherwise they will be rejected with Pull Request.</p>"},{"location":"CONTRIBUTING/#pull-request","title":"Pull Request","text":"<p>Each Pull Request with many changes, that not possible to review (excluding codestyle, rename changes), will be rejected.</p>"},{"location":"CONTRIBUTING/#pull-request-preparation","title":"Pull Request Preparation","text":"<ul> <li>Read rules to create PR in documentation;</li> <li>Update changelog;</li> <li>Update documentation;</li> <li>Cover new functionality with tests;</li> <li>Your code should be written according to a codestyle like in sc-machine (see Codestyle rules).</li> </ul>"},{"location":"CONTRIBUTING/#pull-request-creation","title":"Pull Request creation","text":"<ul> <li>Create PR on GitHub;</li> <li>Check that CI checks were passed successfully.</li> </ul>"},{"location":"CONTRIBUTING/#pull-request-review","title":"Pull Request Review","text":"<ul> <li>Reviewer tests code from PR if CI doesn't do it;</li> <li>Reviewer submits review as set of conversations;</li> <li>Author makes review fixes at <code>Review fixes</code> commits;</li> <li>Author re-requests review;</li> <li>Reviewer resolves conversations and approves PR if conversations were fixed.</li> </ul>"},{"location":"changelog/","title":"Changelog","text":"<p>All notable changes to this project will be documented in this file.</p> <p>The format is based on Keep a Changelog, and this project adheres to Semantic Versioning.</p>"},{"location":"changelog/#unreleased","title":"[Unreleased]","text":""},{"location":"changelog/#added","title":"Added","text":"<ul> <li>Examples of reusable components</li> </ul>"},{"location":"changelog/#changed","title":"Changed","text":"<ul> <li>Bump sc-machine to 0.10.2</li> </ul>"},{"location":"changelog/#020-16032025","title":"[0.2.0] - 16.03.2025","text":""},{"location":"changelog/#added_1","title":"Added","text":"<ul> <li>OSTIS Standard installation</li> </ul>"},{"location":"changelog/#changed_1","title":"Changed","text":"<ul> <li>GetDecompositionAgent: add system identifier of section into result if main identifier is not specified</li> <li>Enable Debug logging for agents</li> </ul>"},{"location":"changelog/#fixed","title":"Fixed","text":"<ul> <li>Changelog of 0.1.0 version</li> <li>Add arc from action class in ui_menu_view_get_decomposition template</li> </ul>"},{"location":"changelog/#010-09032025","title":"[0.1.0] - 09.03.2025","text":""},{"location":"changelog/#added_2","title":"Added","text":"<ul> <li>Sections module</li> <li>ClangFormat for code formatting</li> <li>Base structure of the Metasystem</li> <li>sc-component-manager paths for components</li> </ul>"},{"location":"quick_start/","title":"Quick Start","text":"<p>Note</p> <p>Currently, using the OSTIS Metasystem natively on Windows isn't supported.</p> <ol> <li> <p>Clone repository of the OSTIS Metasystem:</p> <pre><code>git clone https://github.com/ostis-ai/ostis-metasystem\ncd ostis-metasystem\ngit submodule update --init --recursive\n</code></pre> </li> <li> <p>Install C++ problem solver:</p> <pre><code>./scripts/install_cxx_problem_solver.sh\n</code></pre> </li> <li> <p>Build knowledge base:</p> <pre><code>./install/sc-machine/bin/sc-builder -i repo.path -o kb.bin --clear\n</code></pre> </li> <li> <p>Run C++ problem solver:</p> <pre><code>LD_LIBRARY_PATH=./install/sc-machine/lib ./install/sc-machine/bin/sc-machine -s kb.bin -c ostis-metasystem.ini \\\n    -e \"install/sc-machine/lib/extensions;install/sc-component-manager/lib/extensions;install/scp-machine/lib/extensions;install/problem-solver/lib/extensions\"\n</code></pre> </li> <li> <p>Download component specifications from repositories. Execute the following command in a running terminal:</p> <pre><code>components init\n</code></pre> </li> <li> <p>Install sc-web component. Execute the following command in the running terminal:</p> <pre><code>components install sc_web\n</code></pre> </li> <li> <p>Build sc-web. Open new terminal and run:</p> <pre><code>cd platform-dependent-components/interface/install/sc-web\ngit checkout feature/add-scg-iframe\nnpm run build\n</code></pre> </li> <li> <p>Run sc-web:</p> <pre><code>source .venv/bin/activate &amp;&amp; python3 server/app.py --allowed_origins=http://localhost:3000\n</code></pre> </li> <li> <p>Install Python problem solver dependencies. Open new terminal and run:</p> <pre><code>python3 -m venv platform-dependent-components/problem-solver/py/.venv\nsource platform-dependent-components/problem-solver/py/.venv/bin/activate\npip3 install -r platform-dependent-components/problem-solver/py/requirements.txt\n</code></pre> </li> <li> <p>Run Python problem-solver:</p> <pre><code>python3 platform-dependent-components/problem-solver/py/server.py\n</code></pre> </li> <li> <p>Install and build react interface. Open new terminal and run:</p> <pre><code>cd platform-dependent-components/interface/react-sc-web\nnpm install\nnpm run build\n</code></pre> </li> <li> <p>Run react interface:</p> <pre><code>npm run start\n</code></pre> </li> </ol>"},{"location":"build/build_system/","title":"Build System","text":"<p>The ostis-metasystem build system is based on the principles of the sc-machine build system. To learn more about them, read sc-machine build system documentation.</p>"},{"location":"build/build_system/#compilation-steps","title":"Compilation steps","text":"<p>This project uses CMake presets. These presets help manage different build configurations, making it easier to work with dependencies and streamline the build process.</p> <p>If you wish to use CLI instead, you can list all the available configurations in the <code>CMakePresets.json</code> file and pick one of the presets:</p> <pre><code>conan install . -s build_type=&lt;Debug|Release&gt; --build=missing\ncmake --list-presets\n</code></pre>"},{"location":"build/build_system/#configure-presets","title":"Configure presets","text":"<p>Configure presets define how the project is configured before building. They specify various settings, including whether to include tests and which dependencies to use.</p> Name Display Name Description Build location <code>debug-conan</code> Debug config (Conan) Debug config with tests (Conan dependencies used) build/Debug <code>release-conan</code> Release config (Conan) Release config (Conan dependencies used) build/Release <code>release-with-tests-conan</code> Release config with tests (Conan) Release config with tests (Conan dependencies used) build/Release"},{"location":"build/build_system/#build-presets","title":"Build presets","text":"<p>Build presets link to the configure presets and specify how to build the project. They determine the output directories based on the selected configuration.</p> Name Configure Preset Build location <code>debug</code> <code>debug-conan</code> build/Debug <code>release</code> <code>release-conan</code>, <code>release-with-tests-conan</code> build/Release"},{"location":"build/build_system/#recommendations","title":"Recommendations","text":"<ul> <li>For development and debugging, use the Debug config (Conan) (<code>debug-conan</code>) preset. This configuration includes options for testing and benchmarking.</li> <li>For production builds, choose the Release config (Conan) (<code>release-conan</code>) preset to create optimized builds without debugging information.</li> <li>If you need to run tests in a production build, select the Release config with tests (Conan) (<code>release-with-tests-conan</code>) preset.</li> </ul>"},{"location":"build/build_system/#example-usage","title":"Example usage","text":"<p>To build your project using these presets, you can use the following commands:</p> <pre><code># Use pipx to install Conan if not already installed\npipx install conan\n</code></pre> <pre><code># Install dependencies using Conan with Debug build type\nconan install . -s build_type=Debug\n# Configure using debug-conan preset\ncmake --preset debug-conan\n# Build using debug preset\ncmake --build --preset debug\n</code></pre> <p>To build your project for release, you can build with tests to ensure everything works as expected:</p> <pre><code># Install dependencies using Conan with Debug build type\nconan install . -s build_type=Release\n# Configure using release-with-tests preset\ncmake --preset release-with-tests-conan\n# Build using release preset\ncmake --build --preset release\n</code></pre> <p>We also define <code>INSTALL</code> instructions in our CMake. This routine can be launched by appending <code>--target install</code> to the <code>cmake --build --preset &lt;preset&gt;</code> folder. The result of this command will reside in <code>build/&lt;Release|Debug&gt;/install</code> (our default install folder). Install folder is basically a pack of portable executable files and shared libraries required to get ostis-metasystem up and running, this command is intended to create clutter-free archives/folders with our code which you can then use in your own projects.</p>"},{"location":"build/cmake_flags/","title":"CMake Flags","text":""},{"location":"build/cmake_flags/#build-cache","title":"Build cache","text":"<p>This project uses ccache automatically if it's available in the system. To disable this, use flag <code>-DAUTO_CCACHE=OFF</code>.</p>"},{"location":"build/cmake_flags/#building-tests","title":"Building tests","text":"<pre><code>cmake --preset &lt;configure-preset&gt; -DSC_BUILD_TESTS=ON\ncmake --build --preset &lt;build-preset&gt;\n</code></pre>"},{"location":"build/cmake_flags/#code-formatting-with-clangformat","title":"Code formatting with CLangFormat","text":"<p>To check code with CLangFormat run: <pre><code>cmake --preset release-with-tests-conan -DSC_CLANG_FORMAT_CODE=ON\ncmake --build --preset release --target clangformat_check\n</code></pre></p> <p>or <pre><code>./scripts/clang/check_formatting.sh\n</code></pre></p> <p>To format code with CLangFormat run: <pre><code>cmake --preset release-with-tests-conan -DSC_CLANG_FORMAT_CODE=ON\ncmake --build --preset release --target clangformat\n</code></pre></p> <p>or <pre><code>./scripts/clang/format_code.sh\n</code></pre></p>"},{"location":"build/quick_start/","title":"Quick Start for Contributors","text":"<p>This guide provides short information for developers to start to work with ostis-metasystem quickly. You can always learn more about the ostis-metasystem's build system.</p>"},{"location":"build/quick_start/#install-project","title":"Install project","text":"<p>Install ostis-metasystem via git:</p> <pre><code>git clone https://github.com/ostis-ai/ostis-metasystem\ncd ostis-metasystem\ngit submodule update --init --recursive\n</code></pre>"},{"location":"build/quick_start/#check-cmake","title":"Check CMake","text":"<p>Install pipx first using pipx installation guide if not already installed.</p> <p>Ensure you are using CMake version 3.24 or newer. Verify your version with:</p> <pre><code>cmake --version\n</code></pre> <p>To upgrade CMake, run:</p> <pre><code># Use pipx to install cmake if not already installed\npipx install cmake\npipx ensurepath\n# relaunch your shell after installation\nexec $SHELL\n</code></pre> <p>Install Ninja generator for CMake, to use sc-machine CMake presets:</p> <pre><code># Use pipx to install ninja if not already installed\npipx install ninja\npipx ensurepath\n# relaunch your shell after installation\nexec $SHELL\n</code></pre>"},{"location":"build/quick_start/#start-develop-c-problem-solver-of-ostis-metasystem-with-conan","title":"Start develop C++ problem solver of ostis-metasystem with Conan","text":""},{"location":"build/quick_start/#install-conan","title":"Install Conan","text":"<p>Install Conan, to build C++ problem solver dependencies with Conan-provided dependencies:</p> <pre><code># Use pipx to install conan if not already installed\npipx install conan\npipx ensurepath\n# relaunch your shell after installation\nexec $SHELL\n</code></pre>"},{"location":"build/quick_start/#add-conan-remote-repository","title":"Add Conan remote repository","text":"<p>Add Conan remote repository with the specified URL:</p> <pre><code>conan remote add ostis-ai https://conan.ostis.net/artifactory/api/conan/ostis-ai-library\n</code></pre>"},{"location":"build/quick_start/#use-c-problem-solver-in-debug","title":"Use C++ problem solver in Debug","text":""},{"location":"build/quick_start/#install-dependencies-with-conan","title":"Install dependencies with Conan","text":"<p>C++ problem solver of ostis-metasystem is an extension to sc-machine, so sc-machine is main dependency for C++ problem solver. To install it, run in the root of the project:</p> <pre><code>conan install . -s build_type=Debug --build=missing\n</code></pre>"},{"location":"build/quick_start/#build-c-problem-solver-in-debug","title":"Build C++ problem solver in Debug","text":"<p>To build C++ problem solver in debug mode using Conan-provided dependencies, run:</p> <pre><code># debug build type\ncmake --preset debug-conan\ncmake --build --preset debug\n</code></pre> <p>Note</p> <p>By default, configure preset <code>debug</code> enables building C++ problem solver tests.</p>"},{"location":"build/quick_start/#run-c-problem-solver-tests-in-debug","title":"Run C++ problem solver tests in Debug","text":"<p>After that, you can go to <code>build/Debug</code> and run tests via <code>ctest</code>:</p> <pre><code>cd build/Debug\nctest -V\n</code></pre> <p>You can also check code formatting. To learn more, go to the CMake flags page.</p>"},{"location":"build/quick_start/#use-c-problem-solver-in-release","title":"Use C++ problem solver in Release","text":""},{"location":"build/quick_start/#install-dependencies-with-conan_1","title":"Install dependencies with Conan","text":"<p>To install it, run in the root of the project:</p> <pre><code>conan install . -s build_type=Release --build=missing\n</code></pre>"},{"location":"build/quick_start/#build-c-problem-solver-in-release","title":"Build C++ problem solver in Release","text":"<p>To build C++ problem solver in release mode using Conan-provided dependencies, run:</p> <pre><code># release build type without tests\ncmake --preset release-conan\ncmake --build --preset release\n</code></pre> <p>To build C++ problem solver with tests in release mode using Conan-provided dependencies, run:</p> <pre><code># release build type with tests\ncmake --preset release-with-tests-conan\ncmake --build --preset release\n</code></pre>"},{"location":"build/quick_start/#run-c-problem-solver-tests-in-release","title":"Run C++ problem solver tests in Release","text":"<p>After that, you can run tests:</p> <pre><code>cd build/Release\nctest -V\n</code></pre> <p>You can also check code formatting. To learn more, go to the CMake flags page.</p>"},{"location":"build/quick_start/#start-develop-python-problem-solver-of-ostis-metasystem","title":"Start develop Python problem solver of ostis-metasystem","text":""},{"location":"build/quick_start/#install-dependencies-with-pip3","title":"Install dependencies with pip3","text":"<p>To install dependencies, run:</p> <pre><code>python3 -m venv platform-dependent-components/problem-solver/py/.venv\nsource platform-dependent-components/problem-solver/py/.venv/bin/activate\npip3 install -r platform-dependent-components/problem-solver/py/requirements.txt\n</code></pre>"},{"location":"build/quick_start/#run-python-problem-solver-tests","title":"Run Python problem solver tests","text":"<p>Running Python problem solver requires C++ problem solver to be running. Run C++ problem solver:</p> <pre><code>./path/to/sc-machine/binary -s kb.bin \\\n    -e \"path/to/ostis-metasystem/lib/extensions;path/to/sc-machine/lib/extensions\"\n</code></pre> <p>and after that, run Python problem-solver tests in new terminal:</p> <pre><code>source platform-dependent-components/problem-solver/py/.venv/bin/activate &amp;&amp; \\\npython3 -m unittest discover platform-dependent-components/problem-solver/py\n</code></pre>"},{"location":"build/quick_start/#run-python-problem-solver","title":"Run Python problem solver","text":"<p>Run C++ problem solver:</p> <pre><code>./path/to/sc-machine/binary -s kb.bin \\\n    -e \"path/to/ostis-metasystem/lib/extensions;path/to/sc-machine/lib/extensions\"\n</code></pre> <p>and after that, run Python problem-solver in new terminal:</p> <pre><code>source platform-dependent-components/problem-solver/py/.venv/bin/activate &amp;&amp; \\\npython3 platform-dependent-components/problem-solver/py/server.py\n</code></pre>"},{"location":"build/quick_start/#start-develop-interface-of-ostis-metasystem","title":"Start develop interface of ostis-metasystem","text":""},{"location":"build/quick_start/#install-dependencies-with-npm","title":"Install dependencies with npm","text":"<p>To install dependencies, go to the <code>react-sc-web</code> directory and run:</p> <pre><code>cd platform-dependent-components/interface/react-sc-web\nnpm install\n</code></pre>"},{"location":"build/quick_start/#build-interface","title":"Build interface","text":"<p>To build interface, run:</p> <pre><code>npm run build\n</code></pre>"},{"location":"build/quick_start/#run-interface","title":"Run interface","text":"<p>After run:</p> <pre><code>npm run start\n</code></pre>"},{"location":"build/quick_start/#run-ostis-metasystem","title":"Run ostis-metasystem","text":"<p>Before launching ostis-metasystem:</p> <ul> <li>extract sc-machine from GitHub Releases or build it;</li> <li>extract scp-machine from GitHub Releases or build it;</li> <li>extract sc-component-manager from GitHub Releases or build it.</li> </ul> <p>Firstly, build knowledge base:</p> <pre><code>./path/to/sc-builder/binary -i repo.path -o kb.bin --clear\n</code></pre> <p>After run C++ problem solver:</p> <pre><code>./path/to/sc-machine/binary -s kb.bin -c ostis-metasystem.ini \\\n    -e \"path/to/ostis-metasystem/lib/extensions;path/to/sc-machine/lib/extensions;path/to/scp-machine/lib/extensions;path/to/sc-component-manager/lib/extensions\"\n# if several paths to extensions are provided then they should be separated \n# by semicolon and wrapped in double quotes\n</code></pre> <p>Run Python problem solver in new terminal:</p> <pre><code>source platform-dependent-components/problem-solver/py/.venv/bin/activate &amp;&amp; \\\npython3 platform-dependent-components/problem-solver/py/server.py\n</code></pre> <p>And run react-sc-web in new terminal:</p> <pre><code>cd platform-dependent-components/interface/react-sc-web\nnpm run start\n</code></pre>"},{"location":"build/quick_start/#contributing","title":"Contributing","text":"<p>To contribute changes to the project, you need to create Pull Request.</p>"}]}